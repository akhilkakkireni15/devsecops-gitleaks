pipeline {
    agent { label 'akhil-security-agent' }

    environment {
        VAULT_ADDR = 'http://34.228.140.38:8400/'
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('GitLeaks Scan') {
            steps {
                sh '''#!/bin/bash
                    set -eux
                    if ! command -v gitleaks &> /dev/null; then
                        wget https://github.com/zricethezav/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz
                        tar -xzf gitleaks_8.18.1_linux_x64.tar.gz
                        chmod +x gitleaks
                        sudo mv gitleaks /usr/local/bin/
                    fi

                    exit_code=0
                    if ! gitleaks detect --source . --no-git --verbose --report-path gitleaks-report.json; then
                        exit_code=$?
                    fi

                    if [ "$exit_code" -ne 0 ]; then
                        echo "❌ Gitleaks scan failed"
                        exit 1
                    else
                        echo "✅ No leaks found"
                    fi
                '''
            }
        }

        stage('Build & Run') {
            steps {
                script {
                    withVault([vaultSecrets: [
                        [path: 'secret/app_secret', secretValues: [[envVar: 'APP1', vaultKey: 'app1']]]
                    ]]) {
                        sh '''#!/bin/bash
                            set -eux

                            if [ ! -f Dockerfile ]; then
                                echo "❌ Dockerfile not found"
                                exit 1
                            fi

                            docker build -t flask-vault-app .

                            existing_container=$(docker ps -q --filter "publish=8005" || true)
                            if [ -n "$existing_container" ]; then
                                docker stop $existing_container || true
                                docker rm $existing_container || true
                            fi

                            docker run -d -p 8005:5000 -e API_KEY=$APP1 flask-vault-app
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo '✅ Pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed.'
        }
    }
}