pipeline {
    agent {
        label 'akhil-security-agent'
    }

    environment {
        VAULT_ADDR = 'http://34.228.140.38:8400/'
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                echo 'Cleaning workspace...'
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }

        stage('GitLeaks Scan') {
            steps {
                echo 'Running Gitleaks scan...'
                sh '''#!/bin/bash
                    set -eux
                    # Install gitleaks if not present
                    if ! command -v gitleaks &> /dev/null; then
                        echo "Installing Gitleaks..."
                        wget https://github.com/zricethezav/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz
                        tar -xzf gitleaks_8.18.1_linux_x64.tar.gz
                        chmod +x gitleaks
                        sudo mv gitleaks /usr/local/bin/
                    fi

                    # Initialize exit_code to prevent unbound variable errors
                    exit_code=0

                    # Run gitleaks detect (also for uncommitted code)
                    if ! gitleaks detect --source . --no-git --verbose --report-path gitleaks-report.json; then
                        exit_code=$?
                    fi

                    if [ "$exit_code" -ne 0 ]; then
                        echo "‚ùå Gitleaks found leaks (exit code $exit_code)"
                        exit 1
                    else
                        echo "‚úÖ No leaks found."
                    fi
                '''
            }
        }

        stage('Fetch Secret from Vault and Build') {
            steps {
                echo 'Fetching secrets from Vault and building Docker image...'
                script {
                    withVault([vaultSecrets: [
                        [path: 'secret/app_secret', secretValues: [[envVar: 'APP1', vaultKey: 'app1']]]
                    ]]) {
                        sh '''#!/bin/bash
                            set -eux
                            
                            echo "Listing files to confirm Dockerfile presence..."
                            ls -lah

                            if [ ! -f Dockerfile ]; then
                                echo "‚ùå Dockerfile not found in the current directory!"
                                exit 1
                            fi

                            echo "‚úÖ Building Docker image..."
                            docker build -t flask-vault-app .

                            echo "‚úÖ Running container..."
                            docker run -d -p 8005:5000 -e API_KEY=$APP1 flask-vault-app
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed.'
        }
        always {
            echo 'üßπ Cleaning up temporary files...'
        }
    }
}